name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: shopfusion_test
          MYSQL_DATABASE: shopfusion_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
          */*/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install Dependencies (Root)
      run: npm ci
      
    - name: Install Dependencies (Client)
      working-directory: ./client
      run: npm ci
      
    - name: Install Dependencies (Server)
      working-directory: ./server
      run: npm ci

    - name: Lint
      run: |
        npm run lint -w client
        npm run lint -w server

    - name: Setup Test Database
      working-directory: ./server
      run: npm run db:test:reset
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_USER: root
        DB_PASS: shopfusion_test
        DB_NAME: shopfusion_test

    - name: Run Tests (Server)
      working-directory: ./server
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JWT_SECRET: test_secret
        DB_HOST: localhost
        DB_USER: root
        DB_PASS: shopfusion_test
        DB_NAME: shopfusion_test

    - name: Run Tests (Client)
      working-directory: ./client
      run: npm run test:coverage

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Build Client
      working-directory: ./client
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}

  deploy-staging:
    name: Deploy to Staging
    needs: validate
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker-compose -f docker-compose.staging.yml build
        docker-compose -f docker-compose.staging.yml push

    - name: Deploy to staging server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/shopfusion
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          docker system prune -f

  deploy-production:
    name: Deploy to Production
    needs: validate
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker-compose -f docker-compose.prod.yml build
        docker-compose -f docker-compose.prod.yml push

    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/shopfusion
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f
